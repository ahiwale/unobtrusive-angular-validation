@model ResponsivePath.Validation.Web.Models.Home.IndexModel
@{
    Layout = null;
}

<!DOCTYPE html>

<html ng-app="unobtrusive.validation.demo">
<head>

    <title>angular-unobtrusive-validation Demo</title>
    <link href="~/Content/StyleSheet.css" rel="stylesheet" type="text/css" />

    <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.16/angular.min.js"></script>
    <script type="text/javascript" src="/Scripts/angular.unobtrusive.validation.js"></script>
    <script type="text/javascript">
        angular.module('unobtrusive.validation.demo', ['unobtrusive.validation'])
        .run(function ($rootScope) {
            $rootScope.alert = function (arg) { window.alert(arg); };
        });
    </script>

</head>
<body>
    <fieldset>
        <legend>MVC Validation</legend>
        <form method="post" action="" ng-submit="alert('Submitted successfully!')">
            <div class="row">
                @Html.Raw(ViewBag.Result)
                @Html.ValidationSummary()
            </div>
            <div class="row">
                <label class="label" for="@Html.IdFor(m => m.Personal.FirstName)">First Name:</label>
                <span>@Html.TextBoxFor(m => m.Personal.FirstName, new { ng_model = "firstname" })</span>
                @Html.ValidationMessageFor(m => m.Personal.FirstName)
            </div>
            <div class="row">
                <label class="label" for="@Html.IdFor(m => m.Personal.LastName)">Last Name:</label>
                <span>@Html.TextBoxFor(m => m.Personal.LastName, new { ng_model = "lastname" })</span>
                @Html.ValidationMessageFor(m => m.Personal.LastName)
            </div>
            <div class="row">
                <label class="label" for="@Html.IdFor(m => m.Personal.BirthDate)">Birth Date:</label>
                <span>@Html.TextBoxFor(m => m.Personal.BirthDate, new { ng_model = "birthdate" })</span>
                @Html.ValidationMessageFor(m => m.Personal.BirthDate)
            </div>
            <div class="row">
                <label class="label" for="@Html.IdFor(m => m.WebAddress)">Web Address:</label>
                <span>@Html.TextBoxFor(m => m.WebAddress, new { ng_model = "webaddress" })</span>
                @Html.ValidationMessageFor(m => m.WebAddress)
            </div>
            <div class="row">
                <label class="label" for="@Html.IdFor(m => m.Email)">Email:</label>
                <span>@Html.TextBoxFor(m => m.Email, new { ng_model = "email" })</span>
                @Html.ValidationMessageFor(m => m.Email)
            </div>
            <div class="row">
                <label class="label" for="@Html.IdFor(m => m.Number)">Number Required:</label>
                <span>@Html.TextBoxFor(m => m.Number, new { ng_model = "number" })</span>
                @Html.ValidationMessageFor(m => m.Number)
            </div>
            <p>
                It gets obnoxious to type out something like Html....For(m => m.Password) every time, especially when it starts getting longer so we've added a Shortcut method.
            </p>
            @using (var field = Html.Shortcut(m => m.Password)) { 
            <div class="row">
                <label class="label" for="@field.IdFor(m => m)">Password:</label>
                <span>@field.PasswordFor(m => m, new { ng_model = "password" })</span>
                @field.ValidationMessageFor(m => m)
            </div>
            }
            @using (var field = Html.Shortcut(m => m.Password2)) {
            <div class="row">
                <label class="label" for="@field.IdFor(m => m)">Password Again:</label>
                <span>@field.PasswordFor(m => m, new { ng_model = "password2" })</span>
                @field.ValidationMessageFor(m => m)
            </div>
            }
            <p ng-init="items=[{},{}]">
                The problem with the built-in Helpers "...For" with client-side repeaters is that they don't take into account
                the variable changes for `id` and `name` properties. Try using the "Item" properties below.  (Also, they won't 
                let you work with IEnumerables.)
            </p>
            <div ng-repeat="i in items">

                <h3>Item {{$index}}</h3>
                <div class="row">
                    <label class="label" for="@Html.IdFor(m => m.Items[0].Name)">Item {{$index}} Name:</label>
                    <span>@Html.TextBoxFor(m => m.Items[0].Name, new { ng_model = "items[$index].name" })</span>
                    @Html.ValidationMessageFor(m => m.Items[0].Name)
                </div>
                <div class="row">
                    <label class="label" for="@Html.IdFor(m => m.Items[0].Description)">Item {{$index}} Description:</label>
                    <span>@Html.TextBoxFor(m => m.Items[0].Description, new { ng_model = "items[$index].description" })</span>
                    @Html.ValidationMessageFor(m => m.Items[0].Description)
                </div>
            </div>
            <p ng-init="items2=[{},{}]">
                We built our own ClientRepeater tool to assist with that, providing a replacement variable. Unfortuantely, the 
                "id" attribute gets generated without any hooks - we want to go ahead and allow any special characters you have,
                for instance, curly brackets and $, so we built the "Fix" method onto the client repeater, too.
            </p>
            <p>
                Just be careful using $index - a nested repeater overrides that variable. Instead, look at using the key-value 
                syntax for angular.
            </p>
            <div ng-repeat="i in items2">
                <h3>Item {{$index}}</h3>
                <div class="row">
                    <label class="label" for="@Html.ClientRepeater(m => m.ItemsFixed, "{{$index}}").Fix(c => c.IdFor(m => m.Name))">Item {{$index}} Name:</label>
                    <span>@Html.ClientRepeater(m => m.ItemsFixed, "{{$index}}").Fix(c => c.TextBoxFor(m => m.Name, new { ng_model = "items2[$index].name" }))</span>
                    @Html.ClientRepeater(m => m.ItemsFixed, "{{$index}}").ValidationMessageFor(m => m.Name)
                </div>
                @* Alternate syntax using syntactic sugar *@
                @using (var clientRepeaterAnchor = Html.ClientRepeater(m => m.ItemsFixed, "{{$index}}"))
                {
                    <div class="row">
                        <label class="label" for="@clientRepeaterAnchor.Fix(c => c.IdFor(m => m.Description))">Item {{$index}} Description:</label>
                        <span>@clientRepeaterAnchor.Fix(c => c.TextBoxFor(m => m.Description, new { ng_model = "items2[$index].description" }))</span>
                        @clientRepeaterAnchor.ValidationMessageFor(m => m.Description)
                    </div>
                }
            </div>
            <div ng-repeat="(itemIndex, i) in items2">
                <h3 ng-init="i.nested = [{},{}]">Item {{itemIndex}}</h3>
                @using (var item = Html.ClientRepeater(m => m.ItemsFixed, "{{itemIndex}}"))
                {
                    <div ng-repeat="(nestedIndex, nested) in i.nested">
                        @using (var nested = item.ClientRepeater(m => m.Nested, "{{nestedIndex}}"))
                        {
                            <h4>Nested {{nestedIndex}}</h4>
                            <div class="row">
                                @nested.Fix(c => c.LabelFor(m => m.Name, new { @class="label" }))
                                <span>@nested.Fix(c => c.TextBoxFor(m => m.Name, new { ng_model = "nested.name" }))</span>
                                @nested.ValidationMessageFor(m => m.Name)
                            </div>
                            <div class="row">
                                @nested.Fix(c => c.LabelFor(m => m.Description, new { @class = "label" }))
                                <span>@nested.Fix(c => c.TextBoxFor(m => m.Description, new { ng_model = "nested.description" }))</span>
                                @nested.ValidationMessageFor(m => m.Description)
                            </div>
                        }
                    </div>
                }
            </div>
            <div>
                <span class="label">&nbsp;</span>
                <span><input type="submit" value="Submit" data-val-submit /></span>
            </div>
        </form>
    </fieldset>
</body>
</html>
